# This pipeline is used as template to build the sfpowerscripts plugin


name: 'sfpowerscripts Plugin Build'

on:
  workflow_call:
    inputs:
      commitToGit:
        type: boolean
        default: false
      stageToDeploy:
        type: string
        default: review
      version:
        type: string
        default: ''
      environmentToDeploy:
        type: string
        default: development
      organization:
        type: string
        default: ''
      buildNumber:
        type: string
        default: ''
      toBuild:
        type: boolean
        default: false
      bump:
        type: string
        default: 'patch'
      publish:
        type: boolean
        default: false


jobs:
  build:
    name: 'Build Plugin'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: 'Update Build Number'
        if: ${{ inputs.version == 'alpha' }} || ${{ inputs.version == 'hotfix' }}
        run: |
          PKG_VERSION=$(jq -r ".version" package.json)
          echo "##vso[build.updatebuildnumber]${PKG_VERSION}"
        working-directory: '$(System.DefaultWorkingDirectory)/packages/sfpowerscripts-cli'

      - uses: actions/setup-node@v2
        with:
          node-version: '14' 

      - name: 'Set Git Config'
        run: |
          git config --global user.email "sfpowerkit.ci@dev.azure.com"
          git config --global user.name "sfpowerkitci"


      - name: 'Create .npmrc file'
        run: |
           echo "${{ env.NPM_SCOPE }}:registry=https://registry.npmjs.org" > ~/.npmrc
           echo  "_authToken=${AUTH_TOKEN}" >> ~/.npmrc
        env:
          AUTH_TOKEN: ${{ secrets.NPM_TOKEN }} #Need to change this

      - name: 'Create packages/core/.npmrc file'
        run: |
           echo "${{ env.NPM_SCOPE }}:registry=https://registry.npmjs.org" > packages/core/.npmrc
           echo  "_authToken=${AUTH_TOKEN}" >> packages/core/.npmrc
        env:
          AUTH_TOKEN: ${{ secrets.PKG_CORE_NPM_TOKEN }} #Need to change this

      - name: 'Create packages/sfpowerscripts-cli/.npmrc file'
        run: |
           echo "${{ env.NPM_SCOPE }}:registry=https://registry.npmjs.org" > packages/sfpowerscripts-cli/.npmrc
           echo  "_authToken=${AUTH_TOKEN}" >> packages/sfpowerscripts-cli/.npmrc
        env:
          AUTH_TOKEN: ${{ secrets.PKG_SFPCLI_AUTH_TOKEN }} #Need to change this

# TODO: find equivalent for gh actions
      - name: 'npm Authenticate .npmrc'
        id: npmAuthenticate@0
        with:
          workingFile: .npmrc
          customEndpoint: npm

      - name: 'npm Authenticate packages/core/.npmrc'
        id: npmAuthenticate@0
        with:
          workingFile: packages/core/.npmrc
          customEndpoint: npm

      - name: 'npm Authenticate packages/sfpowerscripts-cli/.npmrc'
        id: npmAuthenticate@0
        with:
          workingFile: 'packages/sfpowerscripts-cli/.npmrc'
          customEndpoint: npm
# TODO: until this part only

      - name: 'Bootstrap Lerna'
        if: ${{ inputs.publish == 'true' }} || ${{ inputs.version == 'review' }}
        run: npx lerna bootstrap


      - name: 'Build  All  Packages'
        if: ${{ inputs.publish == 'true' }} || ${{ inputs.version == 'review' }}
        run: npx lerna run build

                 
      - name: 'Run Core Unit Tests'
        if: ${{ inputs.publish == 'true' }}
        run: npm run test
        working-directory: ./packages/core


      - name: 'Run CLI Unit Tests'
        if: ${{ inputs.publish == 'true' }}
        run: 'npm run test'
        working-directory: ./packages/sfpowerscripts-cli


      - name: 'Upload Coverage Results'
        if: ${{ inputs.publish == 'true' }}
        run: 'curl -s https://codecov.io/bash'
        shell: bash
        working-directory: ./packages/core


      - name: 'Publish CLI/Core'
        if: ${{ inputs.publish == 'true' }}
        run: 'npx lerna publish from-package --yes --dist-tag ${{ inputs.version }}'
        working-directory: ./
        # TODO: For confirmation with Alan if this still needs to run in working-directory


      - name: 'Promote package'
        if: ${{ inputs.version == 'beta' }} || ${{ inputs.version == 'latest' }}
        run: |
          CORE_VERSION=$(jq -r ".version" packages/core/package.json)
          CLI_VERSION=$(jq -r ".version" packages/sfpowerscripts-cli/package.json)
          npm dist-tag add @dxatscale/sfpowerscripts.core@${CORE_VERSION} ${{ inputs.version }}
          npm dist-tag add @dxatscale/sfpowerscripts@${CLI_VERSION} ${{ inputs.version }}
